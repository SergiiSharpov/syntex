!function(e){var n={};function t(s){if(n[s])return n[s].exports;var a=n[s]={i:s,l:!1,exports:{}};return e[s].call(a.exports,a,a.exports,t),a.l=!0,a.exports}t.m=e,t.c=n,t.d=function(e,n,s){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:s})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var s=Object.create(null);if(t.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var a in e)t.d(s,a,function(n){return e[n]}.bind(null,a));return s},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="",t(t.s=34)}([function(e,n,t){(function(n){var t="undefined"!=typeof window?window:"undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope?self:{},s=function(){var e=/\blang(?:uage)?-([\w-]+)\b/i,n=0,s=t.Prism={manual:t.Prism&&t.Prism.manual,disableWorkerMessageHandler:t.Prism&&t.Prism.disableWorkerMessageHandler,util:{encode:function(e){return e instanceof a?new a(e.type,s.util.encode(e.content),e.alias):"Array"===s.util.type(e)?e.map(s.util.encode):e.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/\u00a0/g," ")},type:function(e){return Object.prototype.toString.call(e).match(/\[object (\w+)\]/)[1]},objId:function(e){return e.__id||Object.defineProperty(e,"__id",{value:++n}),e.__id},clone:function(e,n){var t=s.util.type(e);switch(n=n||{},t){case"Object":if(n[s.util.objId(e)])return n[s.util.objId(e)];var a={};for(var r in n[s.util.objId(e)]=a,e)e.hasOwnProperty(r)&&(a[r]=s.util.clone(e[r],n));return a;case"Array":if(n[s.util.objId(e)])return n[s.util.objId(e)];a=[];return n[s.util.objId(e)]=a,e.forEach(function(e,t){a[t]=s.util.clone(e,n)}),a}return e}},languages:{extend:function(e,n){var t=s.util.clone(s.languages[e]);for(var a in n)t[a]=n[a];return t},insertBefore:function(e,n,t,a){var r=(a=a||s.languages)[e];if(2==arguments.length){for(var o in t=arguments[1])t.hasOwnProperty(o)&&(r[o]=t[o]);return r}var l={};for(var i in r)if(r.hasOwnProperty(i)){if(i==n)for(var o in t)t.hasOwnProperty(o)&&(l[o]=t[o]);l[i]=r[i]}return s.languages.DFS(s.languages,function(n,t){t===a[e]&&n!=e&&(this[n]=l)}),a[e]=l},DFS:function(e,n,t,a){for(var r in a=a||{},e)e.hasOwnProperty(r)&&(n.call(e,r,e[r],t||r),"Object"!==s.util.type(e[r])||a[s.util.objId(e[r])]?"Array"!==s.util.type(e[r])||a[s.util.objId(e[r])]||(a[s.util.objId(e[r])]=!0,s.languages.DFS(e[r],n,r,a)):(a[s.util.objId(e[r])]=!0,s.languages.DFS(e[r],n,null,a)))}},plugins:{},highlightAll:function(e,n){s.highlightAllUnder(document,e,n)},highlightAllUnder:function(e,n,t){var a={callback:t,selector:'code[class*="language-"], [class*="language-"] code, code[class*="lang-"], [class*="lang-"] code'};s.hooks.run("before-highlightall",a);for(var r,o=a.elements||e.querySelectorAll(a.selector),l=0;r=o[l++];)s.highlightElement(r,!0===n,a.callback)},highlightElement:function(n,a,r){for(var o,l,i=n;i&&!e.test(i.className);)i=i.parentNode;i&&(o=(i.className.match(e)||[,""])[1].toLowerCase(),l=s.languages[o]),n.className=n.className.replace(e,"").replace(/\s+/g," ")+" language-"+o,n.parentNode&&(i=n.parentNode,/pre/i.test(i.nodeName)&&(i.className=i.className.replace(e,"").replace(/\s+/g," ")+" language-"+o));var c={element:n,language:o,grammar:l,code:n.textContent};if(s.hooks.run("before-sanity-check",c),!c.code||!c.grammar)return c.code&&(s.hooks.run("before-highlight",c),c.element.textContent=c.code,s.hooks.run("after-highlight",c)),void s.hooks.run("complete",c);if(s.hooks.run("before-highlight",c),a&&t.Worker){var p=new Worker(s.filename);p.onmessage=function(e){c.highlightedCode=e.data,s.hooks.run("before-insert",c),c.element.innerHTML=c.highlightedCode,r&&r.call(c.element),s.hooks.run("after-highlight",c),s.hooks.run("complete",c)},p.postMessage(JSON.stringify({language:c.language,code:c.code,immediateClose:!0}))}else c.highlightedCode=s.highlight(c.code,c.grammar,c.language),s.hooks.run("before-insert",c),c.element.innerHTML=c.highlightedCode,r&&r.call(n),s.hooks.run("after-highlight",c),s.hooks.run("complete",c)},highlight:function(e,n,t){var r={code:e,grammar:n,language:t};return s.hooks.run("before-tokenize",r),r.tokens=s.tokenize(r.code,r.grammar),s.hooks.run("after-tokenize",r),a.stringify(s.util.encode(r.tokens),r.language)},matchGrammar:function(e,n,t,a,r,o,l){var i=s.Token;for(var c in t)if(t.hasOwnProperty(c)&&t[c]){if(c==l)return;var p=t[c];p="Array"===s.util.type(p)?p:[p];for(var u=0;u<p.length;++u){var d=p[u],f=d.inside,g=!!d.lookbehind,h=!!d.greedy,y=0,m=d.alias;if(h&&!d.pattern.global){var b=d.pattern.toString().match(/[imuy]*$/)[0];d.pattern=RegExp(d.pattern.source,b+"g")}d=d.pattern||d;for(var k=a,v=r;k<n.length;v+=n[k].length,++k){var T=n[k];if(n.length>e.length)return;if(!(T instanceof i)){if(h&&k!=n.length-1){if(d.lastIndex=v,!(E=d.exec(e)))break;for(var x=E.index+(g?E[1].length:0),S=E.index+E[0].length,N=k,w=v,A=n.length;N<A&&(w<S||!n[N].type&&!n[N-1].greedy);++N)x>=(w+=n[N].length)&&(++k,v=w);if(n[k]instanceof i)continue;M=N-k,T=e.slice(v,w),E.index-=v}else{d.lastIndex=0;var E=d.exec(T),M=1}if(E){g&&(y=E[1]?E[1].length:0);S=(x=E.index+y)+(E=E[0].slice(y)).length;var j=T.slice(0,x),O=T.slice(S),I=[k,M];j&&(++k,v+=j.length,I.push(j));var R=new i(c,f?s.tokenize(E,f):E,m,E,h);if(I.push(R),O&&I.push(O),Array.prototype.splice.apply(n,I),1!=M&&s.matchGrammar(e,n,t,k,v,!0,c),o)break}else if(o)break}}}}},tokenize:function(e,n,t){var a=[e],r=n.rest;if(r){for(var o in r)n[o]=r[o];delete n.rest}return s.matchGrammar(e,a,n,0,0,!1),a},hooks:{all:{},add:function(e,n){var t=s.hooks.all;t[e]=t[e]||[],t[e].push(n)},run:function(e,n){var t=s.hooks.all[e];if(t&&t.length)for(var a,r=0;a=t[r++];)a(n)}}},a=s.Token=function(e,n,t,s,a){this.type=e,this.content=n,this.alias=t,this.length=0|(s||"").length,this.greedy=!!a};if(a.stringify=function(e,n,t){if("string"==typeof e)return e;if("Array"===s.util.type(e))return e.map(function(t){return a.stringify(t,n,e)}).join("");var r={type:e.type,content:a.stringify(e.content,n,t),tag:"span",classes:["token",e.type],attributes:{},language:n,parent:t};if(e.alias){var o="Array"===s.util.type(e.alias)?e.alias:[e.alias];Array.prototype.push.apply(r.classes,o)}s.hooks.run("wrap",r);var l=Object.keys(r.attributes).map(function(e){return e+'="'+(r.attributes[e]||"").replace(/"/g,"&quot;")+'"'}).join(" ");return"<"+r.tag+' class="'+r.classes.join(" ")+'"'+(l?" "+l:"")+">"+r.content+"</"+r.tag+">"},!t.document)return t.addEventListener?(s.disableWorkerMessageHandler||t.addEventListener("message",function(e){var n=JSON.parse(e.data),a=n.language,r=n.code,o=n.immediateClose;t.postMessage(s.highlight(r,s.languages[a],a)),o&&t.close()},!1),t.Prism):t.Prism;var r=document.currentScript||[].slice.call(document.getElementsByTagName("script")).pop();return r&&(s.filename=r.src,s.manual||r.hasAttribute("data-manual")||("loading"!==document.readyState?window.requestAnimationFrame?window.requestAnimationFrame(s.highlightAll):window.setTimeout(s.highlightAll,16):document.addEventListener("DOMContentLoaded",s.highlightAll))),t.Prism}();void 0!==e&&e.exports&&(e.exports=s),void 0!==n&&(n.Prism=s),s.languages.markup={comment:/<!--[\s\S]*?-->/,prolog:/<\?[\s\S]+?\?>/,doctype:/<!DOCTYPE[\s\S]+?>/i,cdata:/<!\[CDATA\[[\s\S]*?]]>/i,tag:{pattern:/<\/?(?!\d)[^\s>\/=$<%]+(?:\s+[^\s>\/=]+(?:=(?:("|')(?:\\[\s\S]|(?!\1)[^\\])*\1|[^\s'">=]+))?)*\s*\/?>/i,greedy:!0,inside:{tag:{pattern:/^<\/?[^\s>\/]+/i,inside:{punctuation:/^<\/?/,namespace:/^[^\s>\/:]+:/}},"attr-value":{pattern:/=(?:("|')(?:\\[\s\S]|(?!\1)[^\\])*\1|[^\s'">=]+)/i,inside:{punctuation:[/^=/,{pattern:/(^|[^\\])["']/,lookbehind:!0}]}},punctuation:/\/?>/,"attr-name":{pattern:/[^\s>\/]+/,inside:{namespace:/^[^\s>\/:]+:/}}}},entity:/&#?[\da-z]{1,8};/i},s.languages.markup.tag.inside["attr-value"].inside.entity=s.languages.markup.entity,s.hooks.add("wrap",function(e){"entity"===e.type&&(e.attributes.title=e.content.replace(/&amp;/,"&"))}),s.languages.xml=s.languages.markup,s.languages.html=s.languages.markup,s.languages.mathml=s.languages.markup,s.languages.svg=s.languages.markup,s.languages.css={comment:/\/\*[\s\S]*?\*\//,atrule:{pattern:/@[\w-]+?.*?(?:;|(?=\s*\{))/i,inside:{rule:/@[\w-]+/}},url:/url\((?:(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1|.*?)\)/i,selector:/[^{}\s][^{};]*?(?=\s*\{)/,string:{pattern:/("|')(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,greedy:!0},property:/[-_a-z\xA0-\uFFFF][-\w\xA0-\uFFFF]*(?=\s*:)/i,important:/\B!important\b/i,function:/[-a-z0-9]+(?=\()/i,punctuation:/[(){};:]/},s.languages.css.atrule.inside.rest=s.languages.css,s.languages.markup&&(s.languages.insertBefore("markup","tag",{style:{pattern:/(<style[\s\S]*?>)[\s\S]*?(?=<\/style>)/i,lookbehind:!0,inside:s.languages.css,alias:"language-css",greedy:!0}}),s.languages.insertBefore("inside","attr-value",{"style-attr":{pattern:/\s*style=("|')(?:\\[\s\S]|(?!\1)[^\\])*\1/i,inside:{"attr-name":{pattern:/^\s*style/i,inside:s.languages.markup.tag.inside},punctuation:/^\s*=\s*['"]|['"]\s*$/,"attr-value":{pattern:/.+/i,inside:s.languages.css}},alias:"language-css"}},s.languages.markup.tag)),s.languages.clike={comment:[{pattern:/(^|[^\\])\/\*[\s\S]*?(?:\*\/|$)/,lookbehind:!0},{pattern:/(^|[^\\:])\/\/.*/,lookbehind:!0,greedy:!0}],string:{pattern:/(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,greedy:!0},"class-name":{pattern:/((?:\b(?:class|interface|extends|implements|trait|instanceof|new)\s+)|(?:catch\s+\())[\w.\\]+/i,lookbehind:!0,inside:{punctuation:/[.\\]/}},keyword:/\b(?:if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\b/,boolean:/\b(?:true|false)\b/,function:/[a-z0-9_]+(?=\()/i,number:/\b0x[\da-f]+\b|(?:\b\d+\.?\d*|\B\.\d+)(?:e[+-]?\d+)?/i,operator:/--?|\+\+?|!=?=?|<=?|>=?|==?=?|&&?|\|\|?|\?|\*|\/|~|\^|%/,punctuation:/[{}[\];(),.:]/},s.languages.javascript=s.languages.extend("clike",{keyword:/\b(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|var|void|while|with|yield)\b/,number:/\b(?:0[xX][\dA-Fa-f]+|0[bB][01]+|0[oO][0-7]+|NaN|Infinity)\b|(?:\b\d+\.?\d*|\B\.\d+)(?:[Ee][+-]?\d+)?/,function:/[_$a-z\xA0-\uFFFF][$\w\xA0-\uFFFF]*(?=\s*\()/i,operator:/-[-=]?|\+[+=]?|!=?=?|<<?=?|>>?>?=?|=(?:==?|>)?|&[&=]?|\|[|=]?|\*\*?=?|\/=?|~|\^=?|%=?|\?|\.{3}/}),s.languages.insertBefore("javascript","keyword",{regex:{pattern:/((?:^|[^$\w\xA0-\uFFFF."'\])\s])\s*)\/(\[[^\]\r\n]+]|\\.|[^/\\\[\r\n])+\/[gimyu]{0,5}(?=\s*($|[\r\n,.;})\]]))/,lookbehind:!0,greedy:!0},"function-variable":{pattern:/[_$a-z\xA0-\uFFFF][$\w\xA0-\uFFFF]*(?=\s*=\s*(?:function\b|(?:\([^()]*\)|[_$a-z\xA0-\uFFFF][$\w\xA0-\uFFFF]*)\s*=>))/i,alias:"function"},constant:/\b[A-Z][A-Z\d_]*\b/}),s.languages.insertBefore("javascript","string",{"template-string":{pattern:/`(?:\\[\s\S]|\${[^}]+}|[^\\`])*`/,greedy:!0,inside:{interpolation:{pattern:/\${[^}]+}/,inside:{"interpolation-punctuation":{pattern:/^\${|}$/,alias:"punctuation"},rest:null}},string:/[\s\S]+/}}}),s.languages.javascript["template-string"].inside.interpolation.inside.rest=s.languages.javascript,s.languages.markup&&s.languages.insertBefore("markup","tag",{script:{pattern:/(<script[\s\S]*?>)[\s\S]*?(?=<\/script>)/i,lookbehind:!0,inside:s.languages.javascript,alias:"language-javascript",greedy:!0}}),s.languages.js=s.languages.javascript,"undefined"!=typeof self&&self.Prism&&self.document&&document.querySelector&&(self.Prism.fileHighlight=function(){var e={js:"javascript",py:"python",rb:"ruby",ps1:"powershell",psm1:"powershell",sh:"bash",bat:"batch",h:"c",tex:"latex"};Array.prototype.slice.call(document.querySelectorAll("pre[data-src]")).forEach(function(n){for(var t,a=n.getAttribute("data-src"),r=n,o=/\blang(?:uage)?-([\w-]+)\b/i;r&&!o.test(r.className);)r=r.parentNode;if(r&&(t=(n.className.match(o)||[,""])[1]),!t){var l=(a.match(/\.(\w+)$/)||[,""])[1];t=e[l]||l}var i=document.createElement("code");i.className="language-"+t,n.textContent="",i.textContent="Loading…",n.appendChild(i);var c=new XMLHttpRequest;c.open("GET",a,!0),c.onreadystatechange=function(){4==c.readyState&&(c.status<400&&c.responseText?(i.textContent=c.responseText,s.highlightElement(i)):c.status>=400?i.textContent="✖ Error "+c.status+" while fetching file: "+c.statusText:i.textContent="✖ Error: File does not exist or is empty")},c.send(null)}),s.plugins.toolbar&&s.plugins.toolbar.registerButton("download-file",function(e){var n=e.element.parentNode;if(n&&/pre/i.test(n.nodeName)&&n.hasAttribute("data-src")&&n.hasAttribute("data-download-link")){var t=n.getAttribute("data-src"),s=document.createElement("a");return s.textContent=n.getAttribute("data-download-link-label")||"Download",s.setAttribute("download",""),s.href=t,s}})},document.addEventListener("DOMContentLoaded",self.Prism.fileHighlight))}).call(this,t(12))},function(e,n,t){"use strict";e.exports=function(){}},function(e,n,t){"use strict";n.__esModule=!0;n.addLeadingSlash=function(e){return"/"===e.charAt(0)?e:"/"+e},n.stripLeadingSlash=function(e){return"/"===e.charAt(0)?e.substr(1):e};var s=n.hasBasename=function(e,n){return new RegExp("^"+n+"(\\/|\\?|#|$)","i").test(e)};n.stripBasename=function(e,n){return s(e,n)?e.substr(n.length):e},n.stripTrailingSlash=function(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e},n.parsePath=function(e){var n=e||"/",t="",s="",a=n.indexOf("#");-1!==a&&(s=n.substr(a),n=n.substr(0,a));var r=n.indexOf("?");return-1!==r&&(t=n.substr(r),n=n.substr(0,r)),{pathname:n,search:"?"===t?"":t,hash:"#"===s?"":s}},n.createPath=function(e){var n=e.pathname,t=e.search,s=e.hash,a=n||"/";return t&&"?"!==t&&(a+="?"===t.charAt(0)?t:"?"+t),s&&"#"!==s&&(a+="#"===s.charAt(0)?s:"#"+s),a}},function(e,n){e.exports=function(e){var n=[];return n.toString=function(){return this.map(function(n){var t=function(e,n){var t=e[1]||"",s=e[3];if(!s)return t;if(n&&"function"==typeof btoa){var a=function(e){return"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(e))))+" */"}(s),r=s.sources.map(function(e){return"/*# sourceURL="+s.sourceRoot+e+" */"});return[t].concat(r).concat([a]).join("\n")}return[t].join("\n")}(n,e);return n[2]?"@media "+n[2]+"{"+t+"}":t}).join("")},n.i=function(e,t){"string"==typeof e&&(e=[[null,e,""]]);for(var s={},a=0;a<this.length;a++){var r=this[a][0];"number"==typeof r&&(s[r]=!0)}for(a=0;a<e.length;a++){var o=e[a];"number"==typeof o[0]&&s[o[0]]||(t&&!o[2]?o[2]=t:t&&(o[2]="("+o[2]+") and ("+t+")"),n.push(o))}},n}},function(e,n,t){var s={},a=function(e){var n;return function(){return void 0===n&&(n=e.apply(this,arguments)),n}}(function(){return window&&document&&document.all&&!window.atob}),r=function(e){var n={};return function(e,t){if("function"==typeof e)return e();if(void 0===n[e]){var s=function(e,n){return n?n.querySelector(e):document.querySelector(e)}.call(this,e,t);if(window.HTMLIFrameElement&&s instanceof window.HTMLIFrameElement)try{s=s.contentDocument.head}catch(e){s=null}n[e]=s}return n[e]}}(),o=null,l=0,i=[],c=t(31);function p(e,n){for(var t=0;t<e.length;t++){var a=e[t],r=s[a.id];if(r){r.refs++;for(var o=0;o<r.parts.length;o++)r.parts[o](a.parts[o]);for(;o<a.parts.length;o++)r.parts.push(y(a.parts[o],n))}else{var l=[];for(o=0;o<a.parts.length;o++)l.push(y(a.parts[o],n));s[a.id]={id:a.id,refs:1,parts:l}}}}function u(e,n){for(var t=[],s={},a=0;a<e.length;a++){var r=e[a],o=n.base?r[0]+n.base:r[0],l={css:r[1],media:r[2],sourceMap:r[3]};s[o]?s[o].parts.push(l):t.push(s[o]={id:o,parts:[l]})}return t}function d(e,n){var t=r(e.insertInto);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var s=i[i.length-1];if("top"===e.insertAt)s?s.nextSibling?t.insertBefore(n,s.nextSibling):t.appendChild(n):t.insertBefore(n,t.firstChild),i.push(n);else if("bottom"===e.insertAt)t.appendChild(n);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var a=r(e.insertAt.before,t);t.insertBefore(n,a)}}function f(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var n=i.indexOf(e);n>=0&&i.splice(n,1)}function g(e){var n=document.createElement("style");if(void 0===e.attrs.type&&(e.attrs.type="text/css"),void 0===e.attrs.nonce){var s=function(){0;return t.nc}();s&&(e.attrs.nonce=s)}return h(n,e.attrs),d(e,n),n}function h(e,n){Object.keys(n).forEach(function(t){e.setAttribute(t,n[t])})}function y(e,n){var t,s,a,r;if(n.transform&&e.css){if(!(r=n.transform(e.css)))return function(){};e.css=r}if(n.singleton){var i=l++;t=o||(o=g(n)),s=b.bind(null,t,i,!1),a=b.bind(null,t,i,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(t=function(e){var n=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",h(n,e.attrs),d(e,n),n}(n),s=function(e,n,t){var s=t.css,a=t.sourceMap,r=void 0===n.convertToAbsoluteUrls&&a;(n.convertToAbsoluteUrls||r)&&(s=c(s));a&&(s+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */");var o=new Blob([s],{type:"text/css"}),l=e.href;e.href=URL.createObjectURL(o),l&&URL.revokeObjectURL(l)}.bind(null,t,n),a=function(){f(t),t.href&&URL.revokeObjectURL(t.href)}):(t=g(n),s=function(e,n){var t=n.css,s=n.media;s&&e.setAttribute("media",s);if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}.bind(null,t),a=function(){f(t)});return s(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap)return;s(e=n)}else a()}}e.exports=function(e,n){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(n=n||{}).attrs="object"==typeof n.attrs?n.attrs:{},n.singleton||"boolean"==typeof n.singleton||(n.singleton=a()),n.insertInto||(n.insertInto="head"),n.insertAt||(n.insertAt="bottom");var t=u(e,n);return p(t,n),function(e){for(var a=[],r=0;r<t.length;r++){var o=t[r];(l=s[o.id]).refs--,a.push(l)}e&&p(u(e,n),n);for(r=0;r<a.length;r++){var l;if(0===(l=a[r]).refs){for(var i=0;i<l.parts.length;i++)l.parts[i]();delete s[l.id]}}}};var m=function(){var e=[];return function(n,t){return e[n]=t,e.filter(Boolean).join("\n")}}();function b(e,n,t,s){var a=t?"":s.css;if(e.styleSheet)e.styleSheet.cssText=m(n,a);else{var r=document.createTextNode(a),o=e.childNodes;o[n]&&e.removeChild(o[n]),o.length?e.insertBefore(r,o[n]):e.appendChild(r)}}},function(e,n,t){"use strict";n.__esModule=!0;var s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var s in t)Object.prototype.hasOwnProperty.call(t,s)&&(e[s]=t[s])}return e},r=u(t(1)),o=u(t(6)),l=t(7),i=t(2),c=u(t(10)),p=t(11);function u(e){return e&&e.__esModule?e:{default:e}}var d=function(){try{return window.history.state||{}}catch(e){return{}}};n.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};(0,o.default)(p.canUseDOM,"Browser history needs a DOM");var n=window.history,t=(0,p.supportsHistory)(),u=!(0,p.supportsPopStateOnHashChange)(),f=e.forceRefresh,g=void 0!==f&&f,h=e.getUserConfirmation,y=void 0===h?p.getConfirmation:h,m=e.keyLength,b=void 0===m?6:m,k=e.basename?(0,i.stripTrailingSlash)((0,i.addLeadingSlash)(e.basename)):"",v=function(e){var n=e||{},t=n.key,s=n.state,a=window.location,o=a.pathname+a.search+a.hash;return(0,r.default)(!k||(0,i.hasBasename)(o,k),'You are attempting to use a basename on a page whose URL path does not begin with the basename. Expected path "'+o+'" to begin with "'+k+'".'),k&&(o=(0,i.stripBasename)(o,k)),(0,l.createLocation)(o,s,t)},T=function(){return Math.random().toString(36).substr(2,b)},x=(0,c.default)(),S=function(e){a(C,e),C.length=n.length,x.notifyListeners(C.location,C.action)},N=function(e){(0,p.isExtraneousPopstateEvent)(e)||E(v(e.state))},w=function(){E(v(d()))},A=!1,E=function(e){A?(A=!1,S()):x.confirmTransitionTo(e,"POP",y,function(n){n?S({action:"POP",location:e}):M(e)})},M=function(e){var n=C.location,t=O.indexOf(n.key);-1===t&&(t=0);var s=O.indexOf(e.key);-1===s&&(s=0);var a=t-s;a&&(A=!0,R(a))},j=v(d()),O=[j.key],I=function(e){return k+(0,i.createPath)(e)},R=function(e){n.go(e)},z=0,P=function(e){1===(z+=e)?((0,p.addEventListener)(window,"popstate",N),u&&(0,p.addEventListener)(window,"hashchange",w)):0===z&&((0,p.removeEventListener)(window,"popstate",N),u&&(0,p.removeEventListener)(window,"hashchange",w))},L=!1,C={length:n.length,action:"POP",location:j,createHref:I,push:function(e,a){(0,r.default)(!("object"===(void 0===e?"undefined":s(e))&&void 0!==e.state&&void 0!==a),"You should avoid providing a 2nd state argument to push when the 1st argument is a location-like object that already has state; it is ignored");var o=(0,l.createLocation)(e,a,T(),C.location);x.confirmTransitionTo(o,"PUSH",y,function(e){if(e){var s=I(o),a=o.key,l=o.state;if(t)if(n.pushState({key:a,state:l},null,s),g)window.location.href=s;else{var i=O.indexOf(C.location.key),c=O.slice(0,-1===i?0:i+1);c.push(o.key),O=c,S({action:"PUSH",location:o})}else(0,r.default)(void 0===l,"Browser history cannot push state in browsers that do not support HTML5 history"),window.location.href=s}})},replace:function(e,a){(0,r.default)(!("object"===(void 0===e?"undefined":s(e))&&void 0!==e.state&&void 0!==a),"You should avoid providing a 2nd state argument to replace when the 1st argument is a location-like object that already has state; it is ignored");var o=(0,l.createLocation)(e,a,T(),C.location);x.confirmTransitionTo(o,"REPLACE",y,function(e){if(e){var s=I(o),a=o.key,l=o.state;if(t)if(n.replaceState({key:a,state:l},null,s),g)window.location.replace(s);else{var i=O.indexOf(C.location.key);-1!==i&&(O[i]=o.key),S({action:"REPLACE",location:o})}else(0,r.default)(void 0===l,"Browser history cannot replace state in browsers that do not support HTML5 history"),window.location.replace(s)}})},go:R,goBack:function(){return R(-1)},goForward:function(){return R(1)},block:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],n=x.setPrompt(e);return L||(P(1),L=!0),function(){return L&&(L=!1,P(-1)),n()}},listen:function(e){var n=x.appendListener(e);return P(1),function(){P(-1),n()}}};return C}},function(e,n,t){"use strict";e.exports=function(e,n,t,s,a,r,o,l){if(!e){var i;if(void 0===n)i=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var c=[t,s,a,r,o,l],p=0;(i=new Error(n.replace(/%s/g,function(){return c[p++]}))).name="Invariant Violation"}throw i.framesToPop=1,i}}},function(e,n,t){"use strict";n.__esModule=!0,n.locationsAreEqual=n.createLocation=void 0;var s=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var s in t)Object.prototype.hasOwnProperty.call(t,s)&&(e[s]=t[s])}return e},a=l(t(8)),r=l(t(9)),o=t(2);function l(e){return e&&e.__esModule?e:{default:e}}n.createLocation=function(e,n,t,r){var l=void 0;"string"==typeof e?(l=(0,o.parsePath)(e)).state=n:(void 0===(l=s({},e)).pathname&&(l.pathname=""),l.search?"?"!==l.search.charAt(0)&&(l.search="?"+l.search):l.search="",l.hash?"#"!==l.hash.charAt(0)&&(l.hash="#"+l.hash):l.hash="",void 0!==n&&void 0===l.state&&(l.state=n));try{l.pathname=decodeURI(l.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+l.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return t&&(l.key=t),r?l.pathname?"/"!==l.pathname.charAt(0)&&(l.pathname=(0,a.default)(l.pathname,r.pathname)):l.pathname=r.pathname:l.pathname||(l.pathname="/"),l},n.locationsAreEqual=function(e,n){return e.pathname===n.pathname&&e.search===n.search&&e.hash===n.hash&&e.key===n.key&&(0,r.default)(e.state,n.state)}},function(e,n,t){"use strict";function s(e){return"/"===e.charAt(0)}function a(e,n){for(var t=n,s=t+1,a=e.length;s<a;t+=1,s+=1)e[t]=e[s];e.pop()}t.r(n),n.default=function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",t=e&&e.split("/")||[],r=n&&n.split("/")||[],o=e&&s(e),l=n&&s(n),i=o||l;if(e&&s(e)?r=t:t.length&&(r.pop(),r=r.concat(t)),!r.length)return"/";var c=void 0;if(r.length){var p=r[r.length-1];c="."===p||".."===p||""===p}else c=!1;for(var u=0,d=r.length;d>=0;d--){var f=r[d];"."===f?a(r,d):".."===f?(a(r,d),u++):u&&(a(r,d),u--)}if(!i)for(;u--;u)r.unshift("..");!i||""===r[0]||r[0]&&s(r[0])||r.unshift("");var g=r.join("/");return c&&"/"!==g.substr(-1)&&(g+="/"),g}},function(e,n,t){"use strict";t.r(n);var s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};n.default=function e(n,t){if(n===t)return!0;if(null==n||null==t)return!1;if(Array.isArray(n))return Array.isArray(t)&&n.length===t.length&&n.every(function(n,s){return e(n,t[s])});var a=void 0===n?"undefined":s(n);if(a!==(void 0===t?"undefined":s(t)))return!1;if("object"===a){var r=n.valueOf(),o=t.valueOf();if(r!==n||o!==t)return e(r,o);var l=Object.keys(n),i=Object.keys(t);return l.length===i.length&&l.every(function(s){return e(n[s],t[s])})}return!1}},function(e,n,t){"use strict";n.__esModule=!0;var s=function(e){return e&&e.__esModule?e:{default:e}}(t(1));n.default=function(){var e=null,n=[];return{setPrompt:function(n){return(0,s.default)(null==e,"A history supports only one prompt at a time"),e=n,function(){e===n&&(e=null)}},confirmTransitionTo:function(n,t,a,r){if(null!=e){var o="function"==typeof e?e(n,t):e;"string"==typeof o?"function"==typeof a?a(o,r):((0,s.default)(!1,"A history needs a getUserConfirmation function in order to use a prompt message"),r(!0)):r(!1!==o)}else r(!0)},appendListener:function(e){var t=!0,s=function(){t&&e.apply(void 0,arguments)};return n.push(s),function(){t=!1,n=n.filter(function(e){return e!==s})}},notifyListeners:function(){for(var e=arguments.length,t=Array(e),s=0;s<e;s++)t[s]=arguments[s];n.forEach(function(e){return e.apply(void 0,t)})}}}},function(e,n,t){"use strict";n.__esModule=!0;n.canUseDOM=!("undefined"==typeof window||!window.document||!window.document.createElement),n.addEventListener=function(e,n,t){return e.addEventListener?e.addEventListener(n,t,!1):e.attachEvent("on"+n,t)},n.removeEventListener=function(e,n,t){return e.removeEventListener?e.removeEventListener(n,t,!1):e.detachEvent("on"+n,t)},n.getConfirmation=function(e,n){return n(window.confirm(e))},n.supportsHistory=function(){var e=window.navigator.userAgent;return(-1===e.indexOf("Android 2.")&&-1===e.indexOf("Android 4.0")||-1===e.indexOf("Mobile Safari")||-1!==e.indexOf("Chrome")||-1!==e.indexOf("Windows Phone"))&&(window.history&&"pushState"in window.history)},n.supportsPopStateOnHashChange=function(){return-1===window.navigator.userAgent.indexOf("Trident")},n.supportsGoWithoutReloadUsingHash=function(){return-1===window.navigator.userAgent.indexOf("Firefox")},n.isExtraneousPopstateEvent=function(e){return void 0===e.state&&-1===navigator.userAgent.indexOf("CriOS")}},function(e,n){var t;t=function(){return this}();try{t=t||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(t=window)}e.exports=t},function(e,n,t){const s={};(e=>{e.keys().forEach(n=>s[n.slice(2)]=e(n))})(t(14)),e.exports=s},function(e,n,t){var s={"./Default.html":15,"./LexicalAnalysis.html":16,"./Parsing.html":17,"./ParsingTips.html":18,"./SolversTips.html":19,"./reference/classes/AnalyzerNode.html":20,"./reference/classes/BlockNode.html":21,"./reference/classes/SequenceNode.html":22,"./reference/classes/StringSolver.html":23,"./reference/classes/SyntaxAnalyzer.html":24,"./reference/classes/SyntaxNode.html":25,"./reference/classes/TokenGroup.html":26,"./reference/classes/TokenSolver.html":27,"./reference/functions/splitTokens.html":28};function a(e){var n=r(e);return t(n)}function r(e){var n=s[e];if(!(n+1)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return n}a.keys=function(){return Object.keys(s)},a.resolve=r,e.exports=a,a.id=14},function(e,n){e.exports=" <img src=https://img.shields.io/npm/v/syntex.svg> <img src=https://img.shields.io/npm/l/syntex.svg> <h1>Syntex Documentation</h1> <p> Syntex is fully customizable parser for any programming language that you can imagine. </p> <p> Syntex gives you an ability to build lexical and syntax tree from your code. </p> "},function(e,n){e.exports='<h1>Lexical analysis</h1> <p> To split your program in to the tokens you should call <a href=# class=link>splitTokens</a> method </p> <pre class=language-js>\n<code class=language-js>\nimport {splitTokens} from "syntex";\n\nlet preTokens = splitTokens("let a = 50;", {newline: false, tab: false});\n</code>\n</pre> <p> <span class=bold>The result is: </span> </p> <pre class=language-js>\n<code class=language-js>\n[\n  {\n    "value": "let",\n    "range": [0, 3]\n  },\n  {\n    "value": "a",\n    "range": [4, 5]\n  },\n  {\n    "value": "=",\n    "range": [6, 7]\n  },\n  {\n    "value": "50",\n    "range": [8, 10]\n  },\n  {\n    "value": ";",\n    "range": [11, 12]\n  }\n]\n</code>\n</pre> <br/> <hr/> <h3> To determine the type of tokens you must follow these steps: </h3> <p> <span class="bold blue">1)</span> You must define <a href=# class=link>token types</a>. </p> <pre class=language-js>\n<code class=language-js>\nconst MyTokenTypes = {\n    KEYWORD: "Keyword",\n    IDENTIFIER: "Identifier",\n    OPERATOR: "Operator",\n    DELIMITER: "Delimiter",\n    LINEBREAK: "Linebreak",\n    STRING: "String",\n    NUMERIC: "Numeric",\n    UNKNOWN: \'Unknown\'\n};\n</code>\n</pre> <br/> <p> <span class="bold blue">2)</span> You must define <a href=# class=link>solvers</a> for your token types </p> <pre class=language-js>\n<code class=language-js>\nimport {StringSolver} from "syntex";\n\nconst solvers = {};\n\nsolvers[MyTokenTypes.KEYWORD] = {\n    include: [\n        \'const\',\n        \'let\'\n    ]\n};\n\nsolvers[MyTokenTypes.NUMERIC] = {\n    regexp: /^[0-9.]*$/gm\n};\n\nsolvers[DefaultTokenTypes.STRING] = {\n    type: StringSolver,\n    delimiters: [\'"\', "\'", \'`\']\n};\n\nsolvers[MyTokenTypes.IDENTIFIER] = {\n    regexp: /^[a-zA-Z_][a-zA-Z_0-9]*$/gm\n};\n\nsolvers[MyTokenTypes.DELIMITER] = {\n    default: true\n};\n</code>\n</pre> <p> <span class="bold blue">3)</span> The next step is to generate a token group using token types and solvers that where created before. </p> <pre class=language-js>\n<code class=language-js>\nimport {generateTokenGroup} from "syntex";\n\nlet group = generateTokenGroup(MyTokenTypes, solvers);\n</code>\n</pre> <p> <span class="bold blue">4)</span> Finally you should use the generated group to tokenize your program. </p> <pre class=language-js>\n<code class=language-js>\nlet tokens = group.solve(preTokens);\n</code>\n</pre> <p> <span class=bold>The result is: </span> </p> <pre class=language-js>\n<code class=language-js>\n[\n  {\n    "type": "Keyword",\n    "value": "let",\n    "range": [0, 3]\n  },\n  {\n    "type": "Identifier",\n    "value": "a",\n    "range": [4, 5]\n  },\n  {\n    "type": "Delimiter",\n    "value": "=",\n    "range": [6, 7]\n  },\n  {\n    "type": "Numeric",\n    "value": "50",\n    "range": [8, 10]\n  },\n  {\n    "type": "Delimiter",\n    "value": ";",\n    "range": [11, 12]\n  }\n]\n</code>\n</pre>'},function(e,n){e.exports='<h1>Parsing</h1> <h3>To build an Abstract Syntax Tree you should follow these steps:</h3> <p> <span class="bold blue">1)</span> You must define <a href=# class=link>node types</a>. </p> <pre class=language-js>\n<code class=language-js>\nconst MyNodeTypes = {\n    BLOCK: "BlockDefinition",\n    DECLARATION: "Declaration",\n    COMMENT_MULTIPLE: "CommentMultiple",\n    METHOD_CALLING: "MethodCalling",\n    ARGUMENTS: "ArgumentsDefinition"\n};\n</code>\n</pre> <br/> <p> <span class="bold blue">2)</span> You must define <a href=# class=link>SyntaxNode</a>s. </p> <pre class=language-js>\n<code class=language-js>\nimport {BlockNode, SequenceNode} from "syntex/classes/syntaxAnalyzer";\n\nlet declaration = new SequenceNode({\n    tokenType: MyTokenTypes.KEYWORD, // Start point to parse node\n    type: MyNodeTypes.DECLARATION, // Node type\n    sequence: [ // Sequence of tokens to test\n        {type: MyTokenTypes.KEYWORD}, // First must be KEYWORD\n        {type: MyTokenTypes.IDENTIFIER}, // Second must be an IDENTIFIER\n        {type: MyTokenTypes.DELIMITER}, // Third must be DELIMITER\n        {type: [MyTokenTypes.NUMERIC, MyTokenTypes.STRING]}, //  Fourth must be NUMERIC or STRING\n        \';\' // Fifth must be a ;\n    ],\n    onError: (e) => {\n        //e - Syntax error\n    }\n});\n</code>\n</pre> <p> <span class=bold>OR / AND</span> </p> <pre class=language-js>\n<code class=language-js>\nimport {BlockNode, SequenceNode} from "syntex/classes/syntaxAnalyzer";\n\nlet ArgumentNode = new BlockNode({\n    tokenType: MyTokenTypes.OPERATOR, // Start point to parse node\n    values: [\'(\', \')\'], // There should be opener and closer brackets\n    type: MyNodeTypes.ARGUMENTS, // Node type\n    subNodes: [] // What to use to parse child nodes\n});\n\nlet methodCall = new SequenceNode({\n    tokenType: MyTokenTypes.IDENTIFIER, // Start point to parse node\n    type: MyNodeTypes.METHOD_CALLING, // Node type\n    sequence: [\n        {type: MyTokenTypes.IDENTIFIER}, // Firth must be an IDENTIFIER\n        ArgumentNode, // Second should be an ArgumentNode\n        \';\' // Third should be a ;\n    ],\n    subNodes: [ArgumentNode], // What to use to parse child nodes\n    onError: (e) => {\n        //e - Syntax error\n    }\n})\n</code>\n</pre> <br/> <p> <span class="bold blue">3)</span> You must create a <a href=# class=link>SyntaxAnalyzer</a> and pass nodes to it. </p> <pre class=language-js>\n<code class=language-js>\nlet analyzer = new SyntaxAnalyzer([declaration, methodCall]);\n</code>\n</pre> <p> <span class="bold blue">4)</span> Finally you must set a program and call <a href=# class=link>analyze</a> method of analyzer to parse syntax tree. </p> <pre class=language-js>\n<code class=language-js>\nanalyzer.program = program;\nanalyzer.analyze(tokens);\n\nconsole.log(analyzer.tree); // You will see the Abstract Syntax Tree\n</code>\n</pre> '},function(e,n){e.exports="<h1>Comments</h1> <pre class=language-js>\n<code class=language-js>\nimport {BlockNode} from \"syntex/classes/syntaxAnalyzer\";\n\nnew BlockNode({\n    tokenType: DefaultTokenTypes.OPERATOR,\n    values: ['/*', '*/'],\n    type: DefaultNodeTypes.COMMENT_MULTIPLE,\n    subNodes: []\n})\n</code>\n</pre> <br/> <h1>Scope</h1> <pre class=language-js>\n<code class=language-js>\nimport {BlockNode} from \"syntex/classes/syntaxAnalyzer\";\n\nnew BlockNode({\n    tokenType: DefaultTokenTypes.OPERATOR,\n    values: ['{', '}'],\n    type: DefaultNodeTypes.BLOCK,\n    subNodes: []\n})\n</code>\n</pre> <br/> <h1>Variable declaration</h1> <pre class=language-js>\n<code class=language-js>\nimport {SequenceNode} from \"syntex/classes/syntaxAnalyzer\";\n\nnew SequenceNode({\n    tokenType: DefaultTokenTypes.KEYWORD,\n    type: DefaultNodeTypes.DECLARATION,\n    sequence: [\n        {type: DefaultTokenTypes.KEYWORD},\n        {type: DefaultTokenTypes.IDENTIFIER},\n        {type: DefaultTokenTypes.OPERATOR},\n        {type: [DefaultTokenTypes.STRING, DefaultTokenTypes.NUMERIC, DefaultTokenTypes.IDENTIFIER]},\n        ';'\n    ]\n})\n</code>\n</pre> <br/> <h1>Method calling</h1> <pre class=language-js>\n<code class=language-js>\nimport {SequenceNode, BlockNode} from \"syntex/classes/syntaxAnalyzer\";\n\nlet ArgumentNode = new BlockNode({\n    tokenType: DefaultTokenTypes.OPERATOR,\n    values: ['(', ')'],\n    type: DefaultNodeTypes.ARGUMENTS,\n    subNodes: []\n});\n\nnew SequenceNode({\n    tokenType: DefaultTokenTypes.IDENTIFIER,\n    type: DefaultNodeTypes.METHOD_CALLING,\n    sequence: [\n        {type: DefaultTokenTypes.IDENTIFIER},\n        ArgumentNode,\n        ';'\n    ],\n    subNodes: [ArgumentNode]\n})\n</code>\n</pre> <br/> <h1>Class definition</h1> <pre class=language-js>\n<code class=language-js>\nimport {SequenceNode, BlockNode} from \"syntex/classes/syntaxAnalyzer\";\n\nlet ScopeNode = new BlockNode({\n    tokenType: DefaultTokenTypes.OPERATOR,\n    values: ['{', '}'],\n    type: DefaultNodeTypes.BLOCK\n});\n\nnew SequenceNode({\n    tokenType: DefaultTokenTypes.IDENTIFIER,\n    type: DefaultNodeTypes.CLASS_DEFINITION,\n    sequence: [\n        'class',\n        {type: DefaultTokenTypes.IDENTIFIER},\n        ScopeNode\n    ]\n})\n</code>\n</pre> <br/> "},function(e,n){e.exports="<h1>Strings</h1> <pre class=language-js>\n<code class=language-js>\nimport {StringSolver} from \"syntex\";\n\nsolvers[MyTokenTypes.STRING] = {\n    type: StringSolver, // Extends by StringSolver\n    delimiters: ['\"', \"'\", '`'] // Symbols that should implement strings\n};\n</code>\n</pre> <br/> <h1>Numbers</h1> <pre class=language-js>\n<code class=language-js>\nsolvers[MyTokenTypes.NUMERIC] = {\n    regexp: /^[0-9.]*$/gm\n};\n</code>\n</pre> <br/> <h1>Identifiers</h1> <pre class=language-js>\n<code class=language-js>\nsolvers[MyTokenTypes.IDENTIFIER] = {\n    regexp: /^[a-zA-Z_][a-zA-Z_0-9]*$/gm\n};\n</code>\n</pre> <br/> <h1>Operators</h1> <pre class=language-js>\n<code class=language-js>\nsolvers[MyTokenTypes.OPERATOR] = {\n    include: [\n        '(', ')',\n        '}', '{',\n        '[', ']',\n        '=', '*',\n        \"&lsaquo;\", \"&rsaquo;\",\n        '&', '|',\n        '/',\n        '+', '-',\n        ';', ':',\n        ',', '.',\n        '?', '!',\n    ]\n};\n</code>\n</pre> "},function(e,n){e.exports='<h1>AnalyzerNode</h1> <p> Base node that helps to build AST </p> <p class=props>Constructor</p> <h4 class="def docConstructor">AnalyzerNode({tokenType:String, type = DefaultNodeTypes.UNKNOWN:String, subNodes = undefined:Array} : Object)</h4> <div class=sub_descr> <span class="pd link">.tokenType</span> - Type of the token to start parse with<br/> <span class="pd link">.type</span> - Node type<br/> <span class="pd link">.subNodes</span> - <a href=#classes/AnalyzerNode class="sub_descr link">AnalyzerNode</a>s to parse inner content, If undefined then defaultNodes of <a href=#classes/SyntaxAnalyzer class="sub_descr link">analyzer</a> will be used<br/> </div> <p class=props>Properties</p> <p class="descr docProperty">tokenType:String</p> <p class=sub_descr> Type of the token to start parse with </p> <br/> <p class="descr docProperty">type:String</p> <p class=sub_descr> Node type </p> <br/> <p class="descr docProperty">subNodes:Array</p> <p class=sub_descr> <a href=#classes/AnalyzerNode class="sub_descr link">AnalyzerNode</a>s to parse inner content, If undefined then defaultNodes of <a href=#classes/SyntaxAnalyzer class="sub_descr link">analyzer</a> will be used </p> <br/> <p class=props>Methods</p> <p class="descr docMethod">test(tokenList:Array, index:Number, parent:SyntaxNode, analyzer: SyntaxAnalyzer) : Object | null</p> <p class=sub_descr> Checks if node is exist in the <span class="sub_descr link">tokenList</span> starting form current <span class="sub_descr link">index</span> using <a href=#classes/SyntaxAnalyzer class="sub_descr link">analyzer</a> and <a href=#classes/SyntaxNode class="sub_descr link">parent</a> node. <br/> Returns {<br/> <span class="pd link">count</span> - Number of tokens that must be skipped for tokenList<br/> <span class="pd link">ranges</span> - Array of ranges of the matched nodes that represents ranges of source code content<br/> } </p> <br/> <p class="descr docMethod">run(tokenList:Array, index:Number, parent:SyntaxNode, analyzer: SyntaxAnalyzer) : Number | null</p> <p class=sub_descr> Checks if node is exist in the <span class="sub_descr link">tokenList</span> starting form current <span class="sub_descr link">index</span> using <a href=#classes/SyntaxAnalyzer class="sub_descr link">analyzer</a> and <a href=#classes/SyntaxNode class="sub_descr link">parent</a> node. <br/> If node exist - creates a node and appends it to parent. <br/> Returns count of tokens that must be skipped for tokenList </p> <br/> <p class=props>Static</p> <p class="descr docMethod">parseBlock ( list : Array, position : Number, opener : String(1 Symbol), closer : String(1 Symbol) ) : Object | null</p> <p class=sub_descr> Parse token <span class=link>list</span> starting from target <span class=link>position</span> using <span class=link>opener</span> symbol as start of block and <span class=link>closer</span> symbol as end <br/> Returns {<br/> <span class="pd link">start</span> - Start index of the list<br/> <span class="pd link">end</span> - End index of the list<br/> } </p> <br/> '},function(e,n){e.exports='<h3><a href=#classes/AnalyzerNode class=link>AnalyzerNode</a> &#8594;</h3> <h1>BlockNode</h1> <p> Analyzer node that helps to build AST<br/> Uses <span class=link>openers</span> and <span class=link>closers</span> symbols to detect blocks in the source code </p> <p class=props>Example</p> <pre class=language-js>\n<code class=language-js>\nimport {BlockNode} from "syntex/classes/syntaxAnalyzer";\n\nlet ArgumentNode = new BlockNode({\n    tokenType: MyTokenTypes.OPERATOR,\n    values: [\'(\', \')\'],\n    type: MyNodeTypes.ARGUMENTS,\n    subNodes: []\n});\n\n</code>\n</pre> <p class=props>Constructor</p> <p>See the base <a href=#classes/AnalyzerNode class=link>AnalyzerNode</a> class for common arguments.</p> <h4 class="def docConstructor">SequenceNode({AnalyzerNode props, values = [] : String | Array} : Object)</h4> <div class=sub_descr> <span class="pd link">.values</span> - Symbol or Array of two strings to parse block between them<br/> </div> <p class=props>Properties</p> <p>See the base <a href=#classes/AnalyzerNode class=link>AnalyzerNode</a> class for common properties.</p> <p class="descr docProperty">values:String | Array</p> <p class=sub_descr> Symbol or Array of two strings to parse block between them </p> <br/> <p class=props>Methods</p> <p>See the base <a href=#classes/AnalyzerNode class=link>AnalyzerNode</a> class for common methods.</p>'},function(e,n){e.exports='<h3><a href=#classes/AnalyzerNode class=link>AnalyzerNode</a> &#8594;</h3> <h1>SequenceNode</h1> <p> Analyzer node that helps to build AST using sequence of Symbols, Token types, Analyzer nodes </p> <p class=props>Example</p> <pre class=language-js>\n<code class=language-js>\nimport {SequenceNode} from "syntex/classes/syntaxAnalyzer";\n\nnew SequenceNode({\n    tokenType: MyTokenTypes.KEYWORD,// let, const, ...\n    type: MyNodeTypes.DECLARATION,\n    sequence: [\n        {type: MyTokenTypes.KEYWORD},// let, const, ...\n        {type: MyTokenTypes.IDENTIFIER},// variable name\n        \'=\',\n        {type: [MyTokenTypes.STRING, MyTokenTypes.NUMERIC, MyTokenTypes.IDENTIFIER]},// String or Number or Variable name\n        \';\'\n    ],\n    onError: (e) => {\n        //e - Syntax error\n    }\n})\n\n</code>\n</pre> <p class=props>Constructor</p> <p>See the base <a href=#classes/AnalyzerNode class=link>AnalyzerNode</a> class for common arguments.</p> <h4 class="def docConstructor">SequenceNode({AnalyzerNode props, sequence = [] : Array, onError = null : Callback} : Object)</h4> <div class=sub_descr> <span class="pd link">.sequence</span> - Sequence of Token types, Symbols, AnalyzerNodes<br/> <span class="pd link">.onError</span> - Callback on syntax error<br/> </div> <p class=props>Properties</p> <p>See the base <a href=#classes/AnalyzerNode class=link>AnalyzerNode</a> class for common properties.</p> <p class="descr docProperty">sequence:Array</p> <p class=sub_descr> Sequence of Token types, Symbols, AnalyzerNodes </p> <p class=sub_descr> Sequence can be represented in such way: </p> <pre class=language-js>\n<code class=language-js>\nsequence: [\n    {type: MyTokenTypes.KEYWORD},// let, const, ...\n    SomeNode,// AnalyzerNode\n    \'%\',\n    {type: [MyTokenTypes.STRING, MyTokenTypes.NUMERIC]},// String or Number\n]\n</code>\n</pre> <br/> <p class="descr docProperty">onError:Callback</p> <p class=sub_descr> Callback on syntax error </p> <br/> <p class=props>Methods</p> <p>See the base <a href=#classes/AnalyzerNode class=link>AnalyzerNode</a> class for common methods.</p>'},function(e,n){e.exports='<h3><a href=#classes/TokenSolver class=link>TokenSolver</a> &#8594;</h3> <h1>StringSolver</h1> <p> Solves string types of the lexemes </p> <p class=props>Example</p> <pre class=language-js>\n<code class=language-js>\nimport {generateTokenGroup, splitTokens, StringSolver} from "./syntex";\n\n\nlet preTokens = splitTokens(\'let hello = %World%\', {});\n\n\nconst MyTokenTypes = {\n    STRING: "String"\n};\n\nlet solvers = {};\n\n//Defining StringSolver\nsolvers[MyTokenTypes.STRING] = {\n    type: StringSolver,\n    delimiters: [\'%\']\n};\n\n//Generating TokenGroup\nlet group = generateTokenGroup(MyTokenTypes, solvers);\n\n//Parsing tokens\nlet tokens = group.solve(preTokens);\n\nconsole.log(tokens);\n</code>\n</pre> <p class=props>Constructor</p> <h4 class=def>StringSolver() : <span class=param>TokenSolver</span></h4> <br/> <p class=props>Properties</p> <p>See the base <a href=#classes/TokenSolver class=link>TokenSolver</a> class for common properties.</p> <p class=descr> </p><p class="descr docProperty">delimiters = []:Array</p> <p class=sub_descr> Array of symbols that solver uses for string identification </p> <br/> <p class=props>Methods</p> <p>See the base <a href=#classes/TokenSolver class=link>TokenSolver</a> class for common methods.</p> '},function(e,n){e.exports='<h1>SyntaxAnalyzer</h1> <p> Builds Abstract Syntax Tree from tokens </p> <p class=props>Example</p> <pre class=language-js>\n<code class=language-js>\nimport {SyntaxAnalyzer} from "./syntex";\nimport {BlockNode} from "syntex/classes/syntaxAnalyzer";\n\nconst MyNodeTypes = {\n    COMMENT_MULTIPLE: "CommentBlock"\n};\n\nlet CommentNode = new BlockNode({\n    tokenType: MyTokenTypes.OPERATOR,\n    values: [\'/*\', \'*/\'],\n    type: MyNodeTypes.COMMENT_MULTIPLE,\n    subNodes: []\n});\n\nlet defaultNodes = [CommentNode];\n\n//Defining analyzer\nlet analyzer = new SyntaxAnalyzer(defaultNodes);\n\nanalyzer.program = sourceCode;\nanalyzer.analyze(tokens);\n\nconsole.log(analyzer.tree);//AST\n\n</code>\n</pre> <p class=props>Constructor</p> <h4 class="def docConstructor">SyntaxAnalyzer(defaultNodes = [] : Array)</h4> <div class=sub_descr> <span class="pd link">defaultNodes</span> - Array of AnalyzerNodes<br/> </div> <p class=props>Properties</p> <p class="descr docProperty">tree = []:<a href=#classes/SyntaxNode class="sub_descr link">SyntaxNode</a></p> <p class=sub_descr> Syntax Tree </p> <br/> <p class="descr docProperty">defaultNodeProps = []:Array</p> <p class=sub_descr> Array of AnalyzerNodes </p> <br/> <p class="descr docProperty">program:String</p> <p class=sub_descr> Source code </p> <br/> <p class=props>Methods</p> <p class="descr docMethod">analyze ( tokenList = [] : Array, parent = this.tree : SyntaxNode, analyzerNodes = this.defaultNodeProps : Array) : Void</p> <p class=sub_descr> Analyze <span class=link>tokenList</span> using <span class=link>analyzerNodes</span> and builds AST using <span class=link>parent</span> as root node </p> <br/> <p class=props>Static</p> <p class="descr docMethod">parseBlock ( list : Array, position : Number, opener : String(1 Symbol), closer : String(1 Symbol) ) : Object | null</p> <p class=sub_descr> Parse token <span class=link>list</span> starting from target <span class=link>position</span> using <span class=link>opener</span> symbol as start of block and <span class=link>closer</span> symbol as end <br/> Returns {<br/> <span class="pd link">start</span> - Start index of the list<br/> <span class="pd link">end</span> - End index of the list<br/> } </p> <br/> <p class="descr docMethod">parseMultipleBlock ( list : Array, position : Number, openers : String, closers : String ) : Object | null</p> <p class=sub_descr> Parse token <span class=link>list</span> starting from target <span class=link>position</span> using <span class=link>openers</span> symbols as start of block and <span class=link>closers</span> symbols as end <br/> Returns {<br/> <span class="pd link">start</span> - Start index of the list<br/> <span class="pd link">end</span> - End index of the list<br/> <span class="pd link">length</span> - Count of tokens from start<br/> } </p> <br/> <p class="descr docMethod">getReducedValue ( arr : Array, index : Number, count : Number, key : String ) : String</p> <p class=sub_descr> Returns reduced value from <span class=link>list</span> starting from current <span class=link>index</span>, taking some <span class=link>count</span> of tokens by target <span class=link>key</span> </p> <br/> '},function(e,n){e.exports='<h1>SyntaxNode</h1> <p> A simple node of AST </p> <p class=props>Constructor</p> <h4 class="def docConstructor">SyntaxNode()</h4> <br/> <p class=props>Properties</p> <p class="descr docProperty">childs = []:Array</p> <p class=sub_descr> Array of child nodes </p> <br/> <p class="descr docProperty">range = []:Array</p> <p class=sub_descr> Range of the current node in the source program </p> <br/> <p class="descr docProperty">value = null:Any</p> <p class=sub_descr> Value of this token </p> <br/> <p class="descr docProperty">type = null:String | null</p> <p class=sub_descr> Node type </p> <br/> <p class="descr docProperty">parent = null:SyntaxNode | null</p> <p class=sub_descr> Parent node </p> <br/> <p class=props>Methods</p> <p class="descr docMethod">append ( node : SyntaxNode ) : Void</p> <p class=sub_descr> Append node to current one </p> <br/> <p class="descr docMethod">findUp ( nodeType : String ) : SyntaxNode | null</p> <p class=sub_descr> Returns first matched parent node with type = nodeType or <span class=link>null</span> if node doesn\'t exist </p> <br/> <p class="descr docMethod">findDown ( nodeType : String ) : SyntaxNode | null</p> <p class=sub_descr> Returns first matched child node with type = nodeType or <span class=link>null</span> if node doesn\'t exist </p> <br/> '},function(e,n){e.exports='<h1>TokenGroup</h1> <p> A group of tokens that can be used to parse array of tokens </p> <p class=props>Example</p> <pre class=language-js>\n<code class=language-js>\nimport {generateTokenGroup} from "./syntex";\n\nconst MyTokenTypes = {\n    KEYWORD: "Keyword"\n};\n\nlet solvers = {};\n\n//Defining TokenSolver\nsolvers[MyTokenTypes.KEYWORD] = {\n    include: [\n        \'const\',\n        \'let\'\n    ]\n};\n\n//Generating TokenGroup\nlet group = generateTokenGroup(MyTokenTypes, solvers);\n\nconsole.log(group);\n</code>\n</pre> <p class=props>Constructor</p> <h4 class="def docConstructor">TokenGroup(solvers = {} : Object, defaultSolverId = DefaultTokenTypes.UNKNOWN : String)</h4> <div class=sub_descr> <span class="pd link">solvers</span> - Object that contains solvers for each token type<br/> <span class="pd link">defaultSolverId</span> - Default token type that will be assigned to token if type of it is not solved </div> <p class=props>Properties</p> <p class="descr docProperty">sovers:Objects</p> <p class=sub_descr> Object that contains solvers for each token type </p> <br/> <p class="descr docProperty">defaultSolver:String</p> <p class=sub_descr> Default token type that will be assigned to token if type of it is not solved </p> <br/> <p class=props>Methods</p> <p class="descr docMethod">solve ( tokenList : Array ) : Array</p> <p class=sub_descr> Solve array of the tokens<br/> Returns <span class=link>Array</span> of tokens where each token has type<br/> </p> <br/> '},function(e,n){e.exports='<h1>TokenSolver</h1> <p> Solves simple types of the lexemes </p> <p class=props>Example</p> <pre class=language-js>\n<code class=language-js>\nimport {generateTokenGroup, splitTokens} from "./syntex";\n\n\nlet preTokens = splitTokens(\'let hello = "World"\', {});\n\n\nconst MyTokenTypes = {\n    KEYWORD: "Keyword"\n};\n\nlet solvers = {};\n\n//Defining TokenSolver\nsolvers[MyTokenTypes.KEYWORD] = {\n    include: [\n        \'const\',\n        \'let\'\n    ]\n};\n\n//Defining another one\nsolvers[MyTokenTypes.UNDEFINED] = {\n    default: true\n};\n\n//Generating TokenGroup\nlet group = generateTokenGroup(MyTokenTypes, solvers);\n\n//Parsing tokens\nlet tokens = group.solve(preTokens);\n\nconsole.log(tokens);\n</code>\n</pre> <p class=props>Constructor</p> <h4 class="def docConstructor">TokenSolver()</h4> <br/> <p class=props>Properties</p> <p class="descr docProperty">include = []:Array</p> <p class=sub_descr> Array of words that solver uses for token identification </p> <br/> <p class="descr docProperty">regexp = null:RegExp | null</p> <p class=sub_descr> Regular expression that solver uses for token identification </p> <br/> <p class=props>Methods</p> <p class="descr docMethod">solve ( token : Object, target : Number, tokenList : Array ) : Object | null</p> <p class=sub_descr> Checks if token at target position is related to the target Solver<br/> Returns <span class=link>null</span> if not related.<br/> In other case returns { <span class=docObjProperty>value: String</span>, <span class=docObjProperty>offset: Number</span> }<br/> Where<br/> <span class="pd link">value</span> - Current token value (if solver type is String then value = result string)<br/> <span class="pd link">offset</span> - How many rows of the tokenList must be jumped </p> <br/> '},function(e,n){e.exports='<h1>splitTokens</h1> <p> Splits your program in to the array of tokens </p> <pre class=language-js>\n<code class=language-js>\nimport {splitTokens} from "syntex";\n\nlet preTokens = splitTokens("let a = 50;", {newline: false, tab: false});\n\n//Result\n[\n  {\n    "value": "let",\n    "range": [0, 3]\n  },\n  {\n    "value": "a",\n    "range": [4, 5]\n  },\n  {\n    "value": "=",\n    "range": [6, 7]\n  },\n  {\n    "value": "50",\n    "range": [8, 10]\n  },\n  {\n    "value": ";",\n    "range": [11, 12]\n  }\n]\n</code>\n</pre> <br/> <p class=props>Constructor</p> <h4 class=def>splitTokens( program: <span class=param>String</span>, sub: { <span class=def>newline:</span> <span class=param>Boolean,</span> <span class=def>tab:</span> <span class=param>Boolean,</span> <span class=def>whitespace:</span> <span class=param>Boolean</span> <span class=def>}</span> ) : <span class=param>Array</span> </h4> <p> </p><p class=descr><span class=attr>program</span> - Your source code</p> <p class=descr><span class=attr>sub.newline</span> - Splits by new line</p> <p class=descr><span class=attr>sub.tab</span> - Splits by tab</p> <p class=descr><span class=attr>sub.whitespace</span> - Splits by each whitespace</p> <p></p>'},function(e,n,t){var s=t(30);"string"==typeof s&&(s=[[e.i,s,""]]);var a={hmr:!0,transform:void 0,insertInto:void 0};t(4)(s,a);s.locals&&(e.exports=s.locals)},function(e,n,t){(e.exports=t(3)(!1)).push([e.i,'/**\n * prism.js Coy theme for JavaScript, CoffeeScript, CSS and HTML\n * Based on https://github.com/tshedor/workshop-wp-theme (Example: http://workshop.kansan.com/category/sessions/basics or http://workshop.timshedor.com/category/sessions/basics);\n * @author Tim  Shedor\n */\n\ncode[class*="language-"],\npre[class*="language-"] {\n\tcolor: black;\n\tbackground: none;\n\tfont-family: Consolas, Monaco, \'Andale Mono\', \'Ubuntu Mono\', monospace;\n\ttext-align: left;\n\twhite-space: pre;\n\tword-spacing: normal;\n\tword-break: normal;\n\tword-wrap: normal;\n\tline-height: 1.5;\n\n\t-moz-tab-size: 4;\n\t-o-tab-size: 4;\n\ttab-size: 4;\n\n\t-webkit-hyphens: none;\n\t-moz-hyphens: none;\n\t-ms-hyphens: none;\n\thyphens: none;\n}\n\n/* Code blocks */\npre[class*="language-"] {\n\tposition: relative;\n\tmargin: .5em 0;\n\toverflow: visible;\n\tpadding: 0;\n}\npre[class*="language-"]>code {\n\tposition: relative;\n\tborder-left: 10px solid #358ccb;\n\tbox-shadow: -1px 0px 0px 0px #358ccb, 0px 0px 0px 1px #dfdfdf;\n\tbackground-color: #fdfdfd;\n\tbackground-image: linear-gradient(transparent 50%, rgba(69, 142, 209, 0.04) 50%);\n\tbackground-size: 3em 3em;\n\tbackground-origin: content-box;\n\tbackground-attachment: local;\n}\n\ncode[class*="language"] {\n\tmax-height: inherit;\n\theight: inherit;\n\tpadding: 0 1em;\n\tdisplay: block;\n\toverflow: auto;\n}\n\n/* Margin bottom to accomodate shadow */\n:not(pre) > code[class*="language-"],\npre[class*="language-"] {\n\tbackground-color: #fdfdfd;\n\t-webkit-box-sizing: border-box;\n\t-moz-box-sizing: border-box;\n\tbox-sizing: border-box;\n\tmargin-bottom: 1em;\n}\n\n/* Inline code */\n:not(pre) > code[class*="language-"] {\n\tposition: relative;\n\tpadding: .2em;\n\tborder-radius: 0.3em;\n\tcolor: #c92c2c;\n\tborder: 1px solid rgba(0, 0, 0, 0.1);\n\tdisplay: inline;\n\twhite-space: normal;\n}\n\npre[class*="language-"]:before,\npre[class*="language-"]:after {\n\tcontent: \'\';\n\tz-index: -2;\n\tdisplay: block;\n\tposition: absolute;\n\tbottom: 0.75em;\n\tleft: 0.18em;\n\twidth: 40%;\n\theight: 20%;\n\tmax-height: 13em;\n\tbox-shadow: 0px 13px 8px #979797;\n\t-webkit-transform: rotate(-2deg);\n\t-moz-transform: rotate(-2deg);\n\t-ms-transform: rotate(-2deg);\n\t-o-transform: rotate(-2deg);\n\ttransform: rotate(-2deg);\n}\n\n:not(pre) > code[class*="language-"]:after,\npre[class*="language-"]:after {\n\tright: 0.75em;\n\tleft: auto;\n\t-webkit-transform: rotate(2deg);\n\t-moz-transform: rotate(2deg);\n\t-ms-transform: rotate(2deg);\n\t-o-transform: rotate(2deg);\n\ttransform: rotate(2deg);\n}\n\n.token.comment,\n.token.block-comment,\n.token.prolog,\n.token.doctype,\n.token.cdata {\n\tcolor: #7D8B99;\n}\n\n.token.punctuation {\n\tcolor: #5F6364;\n}\n\n.token.property,\n.token.tag,\n.token.boolean,\n.token.number,\n.token.function-name,\n.token.constant,\n.token.symbol,\n.token.deleted {\n\tcolor: #c92c2c;\n}\n\n.token.selector,\n.token.attr-name,\n.token.string,\n.token.char,\n.token.function,\n.token.builtin,\n.token.inserted {\n\tcolor: #2f9c0a;\n}\n\n.token.operator,\n.token.entity,\n.token.url,\n.token.variable {\n\tcolor: #a67f59;\n\tbackground: rgba(255, 255, 255, 0.5);\n}\n\n.token.atrule,\n.token.attr-value,\n.token.keyword,\n.token.class-name {\n\tcolor: #1990b8;\n}\n\n.token.regex,\n.token.important {\n\tcolor: #e90;\n}\n\n.language-css .token.string,\n.style .token.string {\n\tcolor: #a67f59;\n\tbackground: rgba(255, 255, 255, 0.5);\n}\n\n.token.important {\n\tfont-weight: normal;\n}\n\n.token.bold {\n\tfont-weight: bold;\n}\n.token.italic {\n\tfont-style: italic;\n}\n\n.token.entity {\n\tcursor: help;\n}\n\n.namespace {\n\topacity: .7;\n}\n\n@media screen and (max-width: 767px) {\n\tpre[class*="language-"]:before,\n\tpre[class*="language-"]:after {\n\t\tbottom: 14px;\n\t\tbox-shadow: none;\n\t}\n\n}\n\n/* Plugin styles */\n.token.tab:not(:empty):before,\n.token.cr:before,\n.token.lf:before {\n\tcolor: #e0d7d1;\n}\n\n/* Plugin styles: Line Numbers */\npre[class*="language-"].line-numbers.line-numbers {\n\tpadding-left: 0;\n}\n\npre[class*="language-"].line-numbers.line-numbers code {\n\tpadding-left: 3.8em;\n}\n\npre[class*="language-"].line-numbers.line-numbers .line-numbers-rows {\n\tleft: 0;\n}\n\n/* Plugin styles: Line Highlight */\npre[class*="language-"][data-line] {\n\tpadding-top: 0;\n\tpadding-bottom: 0;\n\tpadding-left: 0;\n}\npre[data-line] code {\n\tposition: relative;\n\tpadding-left: 4em;\n}\npre .line-highlight {\n\tmargin-top: 0;\n}\n',""])},function(e,n){e.exports=function(e){var n="undefined"!=typeof window&&window.location;if(!n)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var t=n.protocol+"//"+n.host,s=t+n.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,n){var a,r=n.trim().replace(/^"(.*)"$/,function(e,n){return n}).replace(/^'(.*)'$/,function(e,n){return n});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(r)?e:(a=0===r.indexOf("//")?r:0===r.indexOf("/")?t+r:s+r.replace(/^\.\//,""),"url("+JSON.stringify(a)+")")})}},function(e,n,t){var s=t(33);"string"==typeof s&&(s=[[e.i,s,""]]);var a={hmr:!0,transform:void 0,insertInto:void 0};t(4)(s,a);s.locals&&(e.exports=s.locals)},function(e,n,t){(e.exports=t(3)(!1)).push([e.i,'\nbody {\n    margin: 0;\n    background-color: #fefefe;\n    color: #212128;\n    animation: 1.0s fadeIn ease-out;\n}\n\nnav, main {\n    font-family: Roboto;\n    font-weight: 100;\n    box-sizing: border-box;\n}\n\nh1, h2, h3, h4, h5 {\n    font-family: Roboto;\n    font-weight: 100;\n}\n\ncode[class*="language-"] {\n    margin-bottom: -23px;\n}\n\nnav.menu {\n    background-color: #f8f8f9;\n    width: 260px;\n    height: 100vh;\n    position: fixed;\n\n    z-index: 10;\n\n    display: flex;\n    flex-direction: column;\n}\n\nmain.content {\n    height: 100vh;\n    width: 100vw;\n    padding-left: 260px;\n    overflow-y: auto;\n}\n\n.content .content_main {\n    padding: 32px;\n}\n\n.slide-to-right {\n    animation: 0.5s slideToRight ease-in-out;\n}\n\n.slide-from-left {\n    animation: 0.5s slideFromLeft ease-in-out;\n}\n\n@keyframes slideFromLeft {\n    0% {\n        transform: translate(-30%, 0);\n        opacity: 0;\n    }\n    100% {\n        transform: translate(0, 0);\n        opacity: 1;\n    }\n}\n\n@keyframes slideToRight {\n    0% {\n        transform: translate(0, 0);\n        opacity: 1;\n    }\n    100% {\n        transform: translate(30%, 0);\n        opacity: 0;\n    }\n}\n\n@keyframes slideFromBottom {\n    0% {\n        transform: translate(0, 30%);\n        opacity: 0;\n    }\n    100% {\n        transform: translate(0, 0);\n        opacity: 1;\n    }\n}\n\n@keyframes fadeIn {\n    0% {\n        opacity: 0;\n    }\n    100% {\n        opacity: 1;\n    }\n}\n\n.menu hr {\n    width: 100%;\n    margin: 0;\n}\n\n.menu_item {\n    display: flex;\n    height: 48px;\n    align-items: center;\n    justify-content: center;\n}\n\n.menu_item.menu_head {\n    font-size: 26px;\n    margin: 16px;\n}\n\n.menu_item.menu_search input {\n    height: 100%;\n    border: 0;\n    outline: 0;\n    width: 100%;\n    font-size: 14px;\n    padding: 0 8px;\n    background-color: transparent;\n}\n\n.menu_item.full_height {\n    height: 100%;\n    flex: 1;\n}\n\n.list {\n    overflow-y: auto;\n    justify-content: flex-start;\n    align-items: flex-start;\n    flex-direction: column;\n    padding: 8px 16px;\n\n    animation: 0.75s slideFromBottom ease-out;\n}\n\n.link {\n    color: #42a5f5;\n    cursor: pointer;\n    text-decoration: none;\n}\n\n.content .link {\n    font-weight: 600;\n}\n\n.content .attr {\n    color: #42a5f5;\n    cursor: pointer;\n    text-decoration: none;\n    font-weight: 400;\n    font-size: 14px;\n}\n\n.content .descr {\n    margin: 2px 0;\n}\n\n.content .sub_descr {\n    font-size: 14px;\n}\n\n.content .props {\n    color: #81c784;\n    font-weight: 500;\n    font-size: 18px;\n}\n\n.content .param {\n    color: #a0a0b4;\n    font-weight: 500;\n}\n\n.content .def {\n    /*color: #212128;*/\n    font-weight: 400;\n}\n\n.content .pd {\n    padding: 16px;\n    padding-right: 0;\n    margin: 0;\n}\n\n.bold {\n    font-weight: 600;\n}\n\n.blue {\n    color: #42a5f5;\n}\n\n.list .head {\n    font-size: 20px;\n    margin: 14px 0;\n}\n\n.list .subhead {\n    font-size: 16px;\n    color: #333333;\n    margin: 6px 0;\n}\n\n.list .link {\n    font-size: 14px;\n    padding: 1px 0;\n}\n\n',""])},function(e,n,t){"use strict";t.r(n);var s=t(5),a=t.n(s);class r{constructor(){this.map={}}on(e,n){this.map[e]||(this.map[e]=[]),this.map[e].push(n)}off(e,n){return!!this.map[e]&&(this.map[e]=this.map[e].map(e=>e!==n),!0)}clear(e){this.map[e]=null}clearAll(){this.map={}}dispatch(e,n){if(!this.map[e])return!1;for(let t of this.map[e])t({data:n,type:e})}}var o=t(0),l=t.n(o);const i=e=>e.split("|").map(e=>`<span class="param">${e}</span>`).join("|"),c=e=>`<span class="def link">${e}</span>`,p=e=>{let n=e.split(":");return n[0]=c(n[0].trim()),n[1]=n[1]&&i(n[1].trim()),n[1]?n.join("&nbsp;:&nbsp;"):n[0]};t(29),t(32);const u=t(13);let d=document.querySelector(".content .content_main"),f=new class extends r{constructor(e,n){super(),this.routes=e,this.pages=n,this.history=a()(),this.currentPage="default",this.unlisten=this.history.listen(()=>{this.processHash()})}dispatchDefaultPage(){if(!this.currentPage)return!1;this.currentPage="",this.dispatch("route-changed",{route:"default",parts:[],content:this.pages[this.routes.default]})}update(){this.processHash()}processHash(){if(this.history.location.hash){let e=this.getHashInfo(this.history.location.hash),n=this.routes[e.join("/")];if(n&&n===this.currentPage)return!1;n?this.pages[n]&&(this.dispatch("route-changed",{route:n,parts:e,content:this.pages[n]}),this.currentPage=n):this.dispatchDefaultPage()}else this.dispatchDefaultPage()}getHashInfo(e){return e.slice(1).split("/")}destroy(){this.unlisten()}}({default:"Default.html",LexicalAnalysis:"LexicalAnalysis.html",Parsing:"Parsing.html",SolversTips:"SolversTips.html",ParsingTips:"ParsingTips.html","functions/splitTokens":"reference/functions/splitTokens.html","classes/TokenSolver":"reference/classes/TokenSolver.html","classes/StringSolver":"reference/classes/StringSolver.html","classes/TokenGroup":"reference/classes/TokenGroup.html","classes/SyntaxNode":"reference/classes/SyntaxNode.html","classes/SyntaxAnalyzer":"reference/classes/SyntaxAnalyzer.html","classes/AnalyzerNode":"reference/classes/AnalyzerNode.html","classes/SequenceNode":"reference/classes/SequenceNode.html","classes/BlockNode":"reference/classes/BlockNode.html"},u);f.on("route-changed",e=>{!function(e,n,t){e.classList.add("slide-to-right"),e.style.webkitAnimationPlayState="running",setTimeout(()=>{e.classList.remove("slide-to-right"),function(e){for(;e.firstChild;)e.removeChild(e.firstChild)}(d),d.innerHTML=n,document.querySelector(".content").scrollTop=0,t(),e.classList.add("slide-from-left"),setTimeout(()=>{e.classList.remove("slide-from-left")},500)},500)}(d,e.data.content,()=>{!function(e,n){e.forEach(e=>{e.innerHTML=l.a.highlight(e.innerText+"\n",l.a.languages[n],n)})}(d.querySelectorAll("code.language-js"),"javascript"),d.querySelectorAll(".docConstructor").forEach(e=>{e.innerHTML=(e=>{let n=e.split(/\(|\)/gm);return n[0]=n[0].trim(),n[1]=n[1].split(",").map(e=>e?p(e.trim()):"").join(",&nbsp;"),n[0]+"("+n[1]+")"})(e.innerText)}),d.querySelectorAll(".docMethod").forEach(e=>{e.innerHTML=(e=>{let n=e.split(/\(|\)/gm);return n[0]=c(n[0].trim()),n[1]=n[1].split(",").map(e=>e?p(e.trim()):"").join(",&nbsp;"),n[2]=n[2]?"&nbsp;:&nbsp;"+i(n[2].replace(":","").trim()):"",n[0]+"("+n[1]+")"+n[2]})(e.innerText)}),d.querySelectorAll(".docProperty").forEach(e=>{e.innerHTML="."+p(e.innerHTML)}),d.querySelectorAll(".docObjProperty").forEach(e=>{e.innerHTML=p(e.innerText)})})}),f.update(),console.log(u)}]);